#!/bin/bash
#
# pbrisbin 2009, 2010
# 
###

# utilities {{{
logger() { echo -e "$(date +'[ %d %b %H:%M ]') :: $*"; }

errorout() { echo -e "\aerror: $*" >&2; exit 1; }

prompt() {
  echo -en "\a$*? [Y/n/q] " && read A

  case "${A:-y}" in
    Y|y) return 0 ;;
    Q|q) exit 1   ;;
    *)   return 1 ;;
  esac
}

make_proper() {
    sed -e 's/_+*/ /g' \
        -e 's/\b\(\w*\)\b/\L\u\1/g' \
        -e 's/ The / the /g' \
        -e 's/ A / a /g' \
        -e 's/ An / an /g' \
        -e 's/ With / with /g' <<< "$1"
}

requirements() {
  local reqs=('bc'      'perl'      'tcprobe'
              'vobcopy' 'mencoder'  'dvdauthor'
              'mkisofs' 'growisofs' 'tee')

  for req in ${reqs[@]}; do
    which $req &>/dev/null || errorout "$req required, not installed."
  done
}

make_clean() {
  logger 'cleaning up after last time...'
  rm -rf "$directory"; mkdir -p "$directory"
}

cleanup() {
  if ! $keep_files; then
    logger 'cleaning up...'
    rm -rf "$directory"
  fi
}

# }}}

# get info {{{
get_dvd_info() {
  local count=0

  logger 'gathering DVD info...'

  false; while [[ $? -ne 0 ]]; do
    [[ $count -gt $limit ]] && errorout "vobcopy failed loading the disc $limit times"

    count=$((count+1))
    sleep 1 && vobcopy -I "$device" > "$directory/title.txt" 2>&1
  done

  [[ -z "$title" ]] && title="$(awk '/Most\ chapters/ {print $6}' "$directory/title.txt")"

  name="$(awk '/Name\ of\ the\ dvd/ {print $6}' "$directory/title.txt")"

  name_lower="${name,,}"
  name_lower="${name_lower// /_}"
  name_proper="$(make_proper "$name")"

  # get a/v and chapter info
  tcprobe -i "$device" -T $title -d 8 > "$directory/probe.txt" 2>&1 || errorout 'tcprobe failed reading disc'

  grep -E "\[Chapter ..\] " "$directory/probe.txt" | cut -d " " -f 4 | \
    perl -pi -e 's/\n/,/' | perl -pi -e 's/,$//' > "$directory/ch.list" || errorout 'failed to parse chapters listing.'

  # a check on the chapters, so far it can always be fixed by picking
  # title 1
  if ! grep -q [1-9] "$directory/ch.list"; then
    prompt 'no chapters were found, continue' || exit 1
  fi

  # calculate the vbr
  l=$(awk '/^V\:/ {print $4}' "$directory/probe.txt")
  a=$(awk '/^A\:/ {print $5}' "$directory/probe.txt")
  a=$(echo "$a/8" | bc)
  vbr=$(echo "(($size-($a*$l))/$l)*8" | bc)

  logger "found device   : $device"
  logger "found title    : $title"
  logger "found name     : $name_proper"
  logger "found bitrate  : $vbr kbit/s"
  logger "found chapters : "

  chapters=( $(sed 's/\,/\n/g' "$directory/ch.list") )

  for ((i=0; i<${#chapters[@]}; i++)); do
    logger "               : chapter $((i+1))\t${chapters[$i]}"
  done
}

# }}}

# make mpeg {{{
make_mpeg() {
  local options

  logger 'encoding video...'

  if [[ -n "$mencoder_options" ]]; then
    options="$mencoder_options"
    logger "adding mencoder option(s) \`$options'..."
  fi


  mencoder dvd://$title -dvd-device "$device" $options -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf scale=720:480,harddup \
    -lavcopts vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=${vbr}:keyint=18:vstrict=0:aspect=16/9 \
    -ofps 30000/1001 -oac copy -o "$directory/movie.mpeg" >>"$stdout" 2>>"$stderr" || errorout "mencoder failed reading disc"

  # save it if desired
  [[ -n "$mpeg_dir" ]] && ionice -t -c 3 cp -v "$directory/movie.mpeg" "$mpeg_dir/$name_lower.mpeg" >>"$stdout" 2>>"$stderr"

  # exit if desired
  $mpeg_only && exit 0
}

# }}}

# author dvd {{{
author_dvd() {
  logger "authoring DVD..."

  if [[ -f "$directory/ch.list" ]]; then
    ionice -t -c 3 dvdauthor -t -c $(cat "$directory/ch.list") -o "$directory/MOVIE" "$directory/movie.mpeg" >>"$stdout" 2>>"$stderr" || errorout 'dvdauthor failed writing movie'
  else
    ionice -t -c 3 dvdauthor -t -o "$directory/MOVIE" "$directory/movie.mpeg" >>"$stdout" 2>>"$stderr" || errorout 'dvdauthor failed writing movie'
  fi

  ionice -t -c 3 dvdauthor -T -o "$directory/MOVIE" >>"$stdout" 2>>"$stderr" || errorout 'dvdauthor failed writing title'

  # save it if desired
  [[ -n "$dvd_dir" ]] && ionice -t -c 3 cp -rv "$directory/MOVIE" "$dvd_dir/${name_lower^^}" >>"$stdout" 2>>"$stderr"

  # exit if desired
  $dvd_only && exit 0
}

# }}}

# build ISO {{{
build_iso() {
  logger 'generating ISO...'

  ionice -t -c 3 mkisofs -dvd-video -o "$directory/movie.iso" "$directory/MOVIE" >>"$stdout" 2>>"$stderr" || errorout 'mkisofs failed creating image'

  # save it if desired
  [[ -n "$iso_dir" ]] && ionice -t -c 3 cp -v "$directory/movie.iso" "$iso_dir/$name_lower.iso" >>"$stdout" 2>>"$stderr"

  # exit if desired
  $iso_only && exit 0
}

# }}}

# burn ISO {{{
burn_iso() {
  local count

  eject "$device" || logger 'eject failed'

  if prompt 'please insert blank medium, continue'; then
    logger 'burning image to disc...'

    # growisofs will fail as we're loading the disc; we'll keep trying
    # until we succeed or reach $limit
    count=0
    false; while [[ $? -ne 0 ]]; do
      [[ $count -gt $limit ]] && errorout "growisofs failed burning image $limit times"

      count=$((count+1))
      sleep 1 && growisofs -dvd-compat -Z $device="$directory/movie.iso" >>"$stdout" 2>>"$stderr"
    done

    sleep 5; eject "$device" || logger 'eject failed'
  fi
}

# }}}

# options handling {{{
message() {
  cat << EOF

  usage: dvdcopy [ --option(=<argument>) ] [...]

    ~/.dvdcopy.conf will be read first if it's found (even if --config
    is passed). for syntax, see the help entry for the --config option.
    commandline arguments will overrule what's defined in the config.

    invalid options are ignored.

    options:

      --config=<file>               read any of the below options from a
                                    file, note that you must strip the
                                    '--' and set any argument-less
                                    options specifically to either true
                                    or false

                                    there is no error if <file> doesn't
                                    exist

      --directory=<directory>       set the working directory, default
                                    is ./dvdcopy

      --keep_files                  keep all intermediate files; note
                                    that they will be removed the next
                                    time dvdcopy is run regardless of
                                    this option

      --device=<file>               set the reader/burner, default is
                                    /dev/sr0

      --title=<number>              set the title, default is longest

      --size=<number>               set the desired output size in KB, 
                                    default is 4193404

      --limit=<number>              set the number of times to attempt a
                                    read/burn before giving up, default
                                    is 15

      --mpeg_only                   stop after transcoding the mpeg
      --dvd_only                    stop after authoring the dvd
      --iso_only                    stop after generating the iso
      
      --mpeg_dir=<directory>        set a save location for the
                                    intermediate mpeg file, default is
                                    blank -- don't save it

      --dvd_dir=<directory>         set a save location for the
                                    intermediate vob folder, default is
                                    blank -- don't save it

      --iso_dir=<directory>         set a save location for the
                                    intermediate iso file, default is
                                    blank -- don't save it

      --mencoder_options=<options>  pass additional arbitrary arguments
                                    to mencoder, multiple options should
                                    be quoted and there is no validation
                                    on these; you'll need to know what
                                    you're doing. the options are placed
                                    after '-dvd-device <device>' but
                                    before all others

      --quiet                       be quiet
      --verbose                     be verbose

      --force                       disable any options validation,
                                    useful if ripping from an image file

      --help                        print this

EOF
  
  exit 1
}

set_defaults() {
  config="$HOME/.dvdcopy.conf"

  directory="$PWD/dvdcopy"
  keep_files=false

  device='/dev/sr0'
  title=''
  size=4193404
  limit=15

  mpeg_only=false
  dvd_only=false
  iso_only=false

  mpeg_dir=''
  dvd_dir=''
  iso_dir=''

  mencoder_options=''

  quiet=false
  verbose=false
  force=false

  stdout='/dev/stdout'
  stderr='/dev/null'
}

parse_options() {
  [[ -f "$config" ]] && . "$config" # get user config

  while [[ -n "$1" ]]; do
    case "$1" in
      --config=*)      . "${1#*=}" 2>/dev/null ;;
      --mpeg_only)     mpeg_only=true          ;;
      --dvd_only)      dvd_only=true           ;;
      --iso_only)      iso_only=true           ;;
      -k|--keep_files) keep_files=true         ;;
      -q|--quiet)      quiet=true              ;;
      -v|--verbose)    verbose=true            ;;
      -f|--force)      force=true              ;;
      -h|--help)       message                 ;;
      *)               eval "${1/--/}"         ;; # all other options
    esac
    shift
  done
}

validate_options() {
  if ! $force; then
    # directory must exist
    [[ ! -d "$directory" ]] && errorout "$directory: does not exist"

    # device must be an optical drive
    [[ ! -b "$device" ]] && errorout "$device: not an optical drive"

    # these need to be numeric
    [[ -n "${title//[0-9]/}" ]] && errorout "$title: non-numeric"
    [[ -n "${size//[0-9]/}" ]]  && errorout "$size: non-numeric"
    [[ -n "${limit//[0-9]/}" ]] && errorout "$limit: non-numeric"

    # if specified, these need to exist
    [[ -n "$mpeg_dir" ]] && [[ ! -d "$mpeg_dir" ]] && errorout "$mpeg_dir: does not exist"
    [[ -n "$dvd_dir" ]]  && [[ ! -d "$dvd_dir" ]]  && errorout "$dvd_dir: does not exist"
    [[ -n "$iso_dir" ]]  && [[ ! -d "$iso_dir" ]]  && errorout "$iso_dir: does not exit"
  fi

  # set derived options
  $mpeg_only && mpeg_dir="${mpeg_dir:-$PWD}"
  $dvd_only  && dvd_dir="${dvd_dir:-$PWD}"
  $iso_only  && iso_dir="${iso_dir:-$PWD}"

  $quiet   && stdout='/dev/null'
  $verbose && stderr='/dev/stderr'
}

# }}}

requirements       # check that we have all required apps
set_defaults       # set sane defaults
parse_options "$@" # parse commandline arguments
validate_options   # validate everything
make_clean         # clear temp directory
get_dvd_info       # get info about the dvd
make_mpeg          # encode an mpeg file
author_dvd         # author a DVD structure
build_iso          # make an iso
burn_iso           # burn an iso
cleanup            # cleanup

logger 'done.'
